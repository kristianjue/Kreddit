@inherits LayoutComponentBase

@using kreddit_app.Data;
@using shared.Model;
@inject ApiService apiService

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@if (_posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <tr>
            <th>Title</th>
            <th>Content</th>
            <th colspan="3">Votes</th>
            <th>Date</th>
            <th>Author</th>
        </tr>
        @foreach (var post in _posts)
        {
            <tr>
                <!-- 
                    These a href links will match the route in the page 'PostItem.razor'.
                    The route is defined as "/post/{id}" and the id is the post id.
                -->
                <td><a href="/post/@post.ThreadsId">@post.Title</a></td>
                <td>@post.Content</td>
                <td>@(post.Upvotes - post.Downvotes)</td>
                <td><button @onclick="() => Upvote(post.ThreadsId)">Upvote</button></td>
                <td><button @onclick="() => Downvote(post.ThreadsId)">Downvote</button></td>
                <td>@(post.Date)</td>
                <td>@post.User.UserName</td>
            </tr>
        }
    </table>

    <br/>
}
<CreateThread OnThreadAdded="RefreshPosts"></CreateThread>

@code {
    private Threads[]? _posts;

    protected override async Task OnInitializedAsync()
    {
        _posts = await apiService.GetPosts();
        Console.WriteLine(_posts.Length);
    }

    private async Task Upvote(long id)
    {
        await apiService.UpvotePost(id);
        await RefreshPosts();
    }

    private async Task Downvote(long id)
    {
        await apiService.DownvotePost(id);
        await RefreshPosts();
    }

    private async Task RefreshPosts()
    {
        _posts = await apiService.GetPosts();
        StateHasChanged();
    }
}
