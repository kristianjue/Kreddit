@page "/post/{id}"

@using kreddit_app.Data;
@using shared.Model;
@inject ApiService apiService
@inject NavigationManager navigationManager

<PageTitle>Kreddit</PageTitle>

<style>
div.contents {
  background-color: #f2f0eb;
  width: 600px;
  border: 2px solid #452d3d;
  padding: 10px;
  margin-top: 20px;
}
</style>
<!-- Back to Home Button -->
<button @onclick="BackToHome">Back to Home</button>

@if (Post == null)
{
<p><em>Loading...</em></p>
}
else
{
<div class="contents">
    <h4>@Post.Title</h4>
    <p><strong>User: @Post.User.UserName, Votes: @(Post.Upvotes - Post.Downvotes)</strong></p>
    <p>@Post.Content</p>
</div>

<div class="contents">
    <h4>Comments</h4>
    @if (Post.Comments.Any())
    {
    <table>
        <tr>
            <th>User</th>
            <th>Comment</th>
            <th colspan="3">Votes</th>
            <th>Date</th>
        </tr>
        @foreach (var comment in Post.Comments)
        {
        <tr>
            <td>@(comment.User.UserName)</td>
            <td>@comment.Content</td>
            <td>@(comment.Upvotes - comment.Downvotes)</td>
            <td><button @onclick="() => Upvote(comment.CommentId)">Upvote</button></td>
            <td><button @onclick="() => Downvote(comment.CommentId)">Downvote</button></td>
            <td>@comment.Date</td>
        </tr>
        }
    </table>
    }
    else
    {
        <p>No comments yet.</p>
    }
</div>

<CreateComment PostId=@PostId OnCommentAdded="RefreshPosts"></CreateComment>
}

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;
    public int PostId { get { return int.Parse(Id); } }
    public Threads? Post { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Post = await apiService.GetPost(PostId);
    }
    private async Task Upvote(long commentId)
    {
        await apiService.UpvoteComment(PostId, commentId);
        await RefreshPosts();
    }

    private async Task Downvote(long commentId)
    {
        await apiService.DownvoteComment(PostId, commentId);
        await RefreshPosts();
    }

    private async Task RefreshPosts()
    {
        Post = await apiService.GetPost(PostId); // Corrected method and variable
        StateHasChanged();
    }
    private void BackToHome()
    {
        navigationManager.NavigateTo("/");
    }

}